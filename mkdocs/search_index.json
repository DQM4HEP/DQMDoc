{
    "docs": [
        {
            "location": "/", 
            "text": "DQM4HEP : an online data quality analysis framework for physicists\n\n\nWelcome to the DQM4HEP pages !\n\n\nDQM4HEP (Data Quality Monitoring for High Energy Physics) provides tools for high energy physicists to efficiently monitor data taking coming from beam test detectors or full collider experiment detectors.\n\n\nThe software provides the following functionalities :\n\n\n\n\nDAQ system entry point to feed the system with raw data\n\n\nRun control plugin system, interfaced to the DAQ one\n\n\nRaw data distributed system using server/client paradigm\n\n\nSet of interfaces and tools for data quality analysis adapted to online DQM purpose\n\n\nHistogram distributed system\n\n\nVisualization interfaces (Qt Gui, web coming soon ...)\n\n\nLarge scale remote process management\n\n\nGeneric IO support for raw data transfer\n\n\nClient elog interface\n\n\n\n\nThe packages are hosted on \nGitHub\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#dqm4hep-an-online-data-quality-analysis-framework-for-physicists", 
            "text": "Welcome to the DQM4HEP pages !  DQM4HEP (Data Quality Monitoring for High Energy Physics) provides tools for high energy physicists to efficiently monitor data taking coming from beam test detectors or full collider experiment detectors.  The software provides the following functionalities :   DAQ system entry point to feed the system with raw data  Run control plugin system, interfaced to the DAQ one  Raw data distributed system using server/client paradigm  Set of interfaces and tools for data quality analysis adapted to online DQM purpose  Histogram distributed system  Visualization interfaces (Qt Gui, web coming soon ...)  Large scale remote process management  Generic IO support for raw data transfer  Client elog interface   The packages are hosted on  GitHub .", 
            "title": "DQM4HEP : an online data quality analysis framework for physicists"
        }, 
        {
            "location": "/download/", 
            "text": "", 
            "title": "Download"
        }, 
        {
            "location": "/manual/install/", 
            "text": "DOCUMENT OUT OF DATE\n\n\nIntroduction\n\n\nDQM4HEP\n (Data Quality Monitoring For High Energy Physics) is a software used to monitor online data coming from a test-beam setup or a full detector experiments like LHC or the future collider ILC. It provides :\n\n\n\n\nNetwork tools to transfer data and histograms\n\n\nA plug-in system to convert data into raw buffers\n\n\nA plug-in system to process fast analysis and publish histograms through a service\n\n\nUser interfaces to visualise histograms coming from analysis plug-ins (GUI, Web pages, etc ...) and DQM system control\n\n\n\n\nInstallation\n\n\nDownload sources\n\n\nThe package sources are available on the github page \nhttps://github.com/DQM4HEP/DQM4HEP\n.\nYou can either download the last head (development) version with:\n\n\n$ git clone https://github.com/DQM4HEP/DQM4HEP.git\n\n\n\n\nOr download and unpack the latest (stable) release version : \nhttps://github.com/DQM4HEP/DQM4HEP/releases/latest\n\n\nDependencies\n\n\nThe package is implemented in \nC++11\n and configured via \ncmake\n. For the lightest install of the software, you\u2019ll need :\n\n\n\n\nA c++11 compliant copiler (\ngcc4.8\n or \nclang7.0\n and later)\n\n\nCMake : to compile the package (\nwww.cmake.org\n)\n\n\nDIM : for TCP/IP sockets handling. Used for services and client remote connections in the data transfer and histogram transfer parts (\nwww.cern.ch/dim\n).\n On MacOSX\n10.9, dim will not compile out of the box but a fix is included with the DQM4HEP sources. Please read the \nINSTALL_MAC.txt\n file for more informations.\n\n\nROOT : for histogram handling (\nwww.root.cern.ch\n)\n\n\n\n\nFor a more complete version, you\u2019ll need the optionnal packages :\n\n\n\n\nLCIO (part of ILCSOFT) : for io data handling with this Event Data Model (\nhttp://lcio.desy.de/\n)\n\n\nQt : for graphical user interface implementation in the visualization system part (\nhttps://www.qt.io/download/\n). You will then need to recompile root with the \n--enable-qt option\n ( if you did not install Qt through the package manager you may also need to add \n--with-qt-incdir=$QTDIR/include\n \n--with-qt-libdir=$QTDIR/lib\n).  \n\n\n\n\nPlease note that as of June 2015 Qt4 can no longer be built from sources under MacOSX Mavericks and later. A working alternative is to use mac- ports (\nhttps://www.macports.org\n) and the following instructions (taken from: \nhttps://trac.macports.org/ticket/46238\n):\n\n\n$ git clone https://github.com/RJVB/macstrop\n$ sudo port -v configure qt4-mac +concurrent\n$ sudo port -v destroot qt4-mac +concurrent\n$ sudo port -v -k install qt4-mac +concurrent [qt4-mac-transitional]\n\n\n\n\n\n\nDoxygen : to generate code documentation (\nwww.doxygen.org\n).\n\n\nElog : to use the Elog interface (\nhttps://midas.psi.ch/elog/\n)\n\n\n\n\nAll dependencies are also available through desy's \nafs\n (/afs/desy.de/project/ilcsoft/sw/$gcc_version/) and \ncvmfs\n (/cvmfs/ilc.desy.de/sw/$gcc_version/) installation. \n(Except for dim and elog?)\n\n\nCompilation and installation\n\n\nTo compile the package :\n\n\n$ cd DQM4HEP # Where you cloned the package or unziped it\n$ mkdir build # if the directory doesn\u2019t exists\n$ cmake .. # this will create the makefile\n$ make install\n\n\n\n\nyou might have to give a hint to cmake as to where to find the dependencies with the \n-D${DependencyName}_DIR=/path/to/dependency/dir\n flag\n\n\nYou can also modify the following options :\n\n\n\n\nDOC_INSTALL (ON/OFF)\n : to install Doxygen documentation. Requires Doxygen installed. \nDefault is OFF\n.\n\n\nDQM4HEP_VIZUALISATION (ON/OFF)\n : to install Qt Graphical user interface. Requires \nQt\n installed and \nROOT\n compiled with option \n--enable-qt\n. \nDefault is ON\n.\n\n\nDQM4HEP_USE_LCIO (ON/OFF)\n : to build lcio plug streamer for data transfer and lcio data processing. Requires LCIO installed. \nDefault is ON\n.\n\n\nDQM4HEP_USE_ELOG (ON/OFF)\n : to build the ELog C++ interface. Requires elog binary installed. \nDefault is ON\n.\n\n\nDQM4HEP_BUILD_EXAMPLES (ON/OFF)\n : to build dqm4hep examples. \nDefault is ON\n.\n\n\n\n\nFor example to install the Doxygen documentation option only, you can use the following command line :\n\n\n$ cmake -DDOC_INSTALL=ON ..\n\n\n\n\nThis will produce a shared library in the \nlib\n directory called \nlibDQM4HEP.so\n and many executables in the bin directory.\n\nA cmake script called \nDQM4HEPConfig.cmake\n is produced in the root directory and will help the user to load correctly the library and find the headers to implements their analysis modules.", 
            "title": "Installation guide"
        }, 
        {
            "location": "/manual/install/#introduction", 
            "text": "DQM4HEP  (Data Quality Monitoring For High Energy Physics) is a software used to monitor online data coming from a test-beam setup or a full detector experiments like LHC or the future collider ILC. It provides :   Network tools to transfer data and histograms  A plug-in system to convert data into raw buffers  A plug-in system to process fast analysis and publish histograms through a service  User interfaces to visualise histograms coming from analysis plug-ins (GUI, Web pages, etc ...) and DQM system control", 
            "title": "Introduction"
        }, 
        {
            "location": "/manual/install/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/manual/install/#download-sources", 
            "text": "The package sources are available on the github page  https://github.com/DQM4HEP/DQM4HEP .\nYou can either download the last head (development) version with:  $ git clone https://github.com/DQM4HEP/DQM4HEP.git  Or download and unpack the latest (stable) release version :  https://github.com/DQM4HEP/DQM4HEP/releases/latest", 
            "title": "Download sources"
        }, 
        {
            "location": "/manual/install/#dependencies", 
            "text": "The package is implemented in  C++11  and configured via  cmake . For the lightest install of the software, you\u2019ll need :   A c++11 compliant copiler ( gcc4.8  or  clang7.0  and later)  CMake : to compile the package ( www.cmake.org )  DIM : for TCP/IP sockets handling. Used for services and client remote connections in the data transfer and histogram transfer parts ( www.cern.ch/dim ).\n On MacOSX 10.9, dim will not compile out of the box but a fix is included with the DQM4HEP sources. Please read the  INSTALL_MAC.txt  file for more informations.  ROOT : for histogram handling ( www.root.cern.ch )   For a more complete version, you\u2019ll need the optionnal packages :   LCIO (part of ILCSOFT) : for io data handling with this Event Data Model ( http://lcio.desy.de/ )  Qt : for graphical user interface implementation in the visualization system part ( https://www.qt.io/download/ ). You will then need to recompile root with the  --enable-qt option  ( if you did not install Qt through the package manager you may also need to add  --with-qt-incdir=$QTDIR/include   --with-qt-libdir=$QTDIR/lib ).     Please note that as of June 2015 Qt4 can no longer be built from sources under MacOSX Mavericks and later. A working alternative is to use mac- ports ( https://www.macports.org ) and the following instructions (taken from:  https://trac.macports.org/ticket/46238 ):  $ git clone https://github.com/RJVB/macstrop\n$ sudo port -v configure qt4-mac +concurrent\n$ sudo port -v destroot qt4-mac +concurrent\n$ sudo port -v -k install qt4-mac +concurrent [qt4-mac-transitional]   Doxygen : to generate code documentation ( www.doxygen.org ).  Elog : to use the Elog interface ( https://midas.psi.ch/elog/ )   All dependencies are also available through desy's  afs  (/afs/desy.de/project/ilcsoft/sw/$gcc_version/) and  cvmfs  (/cvmfs/ilc.desy.de/sw/$gcc_version/) installation.  (Except for dim and elog?)", 
            "title": "Dependencies"
        }, 
        {
            "location": "/manual/install/#compilation-and-installation", 
            "text": "To compile the package :  $ cd DQM4HEP # Where you cloned the package or unziped it\n$ mkdir build # if the directory doesn\u2019t exists\n$ cmake .. # this will create the makefile\n$ make install  you might have to give a hint to cmake as to where to find the dependencies with the  -D${DependencyName}_DIR=/path/to/dependency/dir  flag  You can also modify the following options :   DOC_INSTALL (ON/OFF)  : to install Doxygen documentation. Requires Doxygen installed.  Default is OFF .  DQM4HEP_VIZUALISATION (ON/OFF)  : to install Qt Graphical user interface. Requires  Qt  installed and  ROOT  compiled with option  --enable-qt .  Default is ON .  DQM4HEP_USE_LCIO (ON/OFF)  : to build lcio plug streamer for data transfer and lcio data processing. Requires LCIO installed.  Default is ON .  DQM4HEP_USE_ELOG (ON/OFF)  : to build the ELog C++ interface. Requires elog binary installed.  Default is ON .  DQM4HEP_BUILD_EXAMPLES (ON/OFF)  : to build dqm4hep examples.  Default is ON .   For example to install the Doxygen documentation option only, you can use the following command line :  $ cmake -DDOC_INSTALL=ON ..  This will produce a shared library in the  lib  directory called  libDQM4HEP.so  and many executables in the bin directory. \nA cmake script called  DQM4HEPConfig.cmake  is produced in the root directory and will help the user to load correctly the library and find the headers to implements their analysis modules.", 
            "title": "Compilation and installation"
        }, 
        {
            "location": "/manual/userguide/", 
            "text": "DOCUMENT OUT OF DATE", 
            "title": "User guide"
        }, 
        {
            "location": "/manual/devguide/", 
            "text": "DOCUMENT OUT OF DATE\n\n\nInstallation\n\n\nThe installation of the software is described in the \nInstallationGuide\n.\n\n\nDirectory structure and contents\n\n\nBefore compiling the package, you will find in the root directory :\n\n\n\n\ncmake\n : A directory containing cmake scripts needed to configure the application at compile time\n\n\nCMakeLists.txt\n : The top level cmake file needed to compile the package\n\n\nCOPYING.txt\n : The GPL licence of the software\n\n\ndim4mac\n : A directory containing instructions and patches to compile DIM on Ma- cOSX systems\n\n\ndoc\n : A directory containing the documentation of the software. A developer guide, an installation guide and a user guide is present. If the package is compiled with Doxygen, you will find the output code documentation in html and latex\n\n\nicons\n : A directory containing icons for the visualisation system\n\n\nINSTALL.txt\n : A file that forward the user to the installation guide in the doc directory\n\n\nREADME.txt\n : A read-me file\n\n\nsource\n : The directory that contains all the sources of the package. You will find also an example directory with some plug-ins samples\n\n\nbin\n : A directory containing all the binaries.\n\n\nDQM4HEPConfig.cmake\n : The cmake script to load via the cmake command find_package(DQM4HEP) in a CMakeLists.txt file. This is the case for the data sending interface use and analysis module implementation in a separate project.\n\n\nDQM4HEPConfigVersion.cmake\n : A cmake script to load the package version correctly in user\u2019s projects.\n\n\nlib\n : A directory containing the shared libraries.\n\n\n\n\nExcept for the README.txt, INSTALL.txt and COPYING.txt all the files and directories are needed to compile correctly the package. After running the make install command in the installation process, some directories and files are appended to the package :\n\n\nGlobal overview\n\n\nThe key points of this software are :\n\n\n\n\nA standalone run control : the software provides a run control service/client to send/receive start of run (SOR) and end of run (EOR) commands together with a run number, start/end time, run description and detector name.\n\n\nA data distributing system : it provides a sender interface to send data to data collectors: A data collector to collect data, and a client interface to receive these data on update signal (Automatic or request from the user).\n\n\nAn analysis plug-in system : it provides a plug-in mechanism for user analysis module that :\n\n\nprocesses incoming data in the DQM system\n\n\nproduces monitor elements which can be histograms, profiles, scalars, strings, etc.\n\n\nredistributes monitor elements to a dedicated collector via a sender interface.\n\n\nVisualisation interfaces : graphical user interfaces (GUI) to control the DQM processes and to visualise monitor elements coming from user analysis modules.\n\n\n\n\n\n\n\n\nNetwork aspects\n\n\nDIM implementation\n\n\nThe \nDIM network implementation \n is used as a DNS node (DIM Name Server\nNode) where all the services are registered. When a client wants to subscribe to a service, he requests the service machine to the DNS node which forward the connection to the machine on which the service is running.\nA connection is thus created between the server machine and the client one and they start to communicate with a TPC/IP socket.\nThe default port used to initiate a connection is 2505 which can be changed by exporting the DIM_DNS_PORT environment variable. For application servers, one needs to export the environment variable DIM_DNS_NODE to the host name of the machine where the dns is running.\n\n\n DQM4HEP network implementation\n\n\nDQM4HEP implementation\n\n\nSince DQM4HEP uses DIM as network interface, the architecture looks the same. The dif- ferent parts of the software are split in different processes that can be run either on the same machine or on multiple ones. Theses processes are connected by DIM services and clients.\n\n\nNext figure shows the different processes implemented in DQM4HEP. The red part represents the clients processes and in blue the server processes. The data sender process sends data usually coming from DAQ systems or files in order to feed the data collector. The collected data are then re-distributed to data clients.\nFrom here the analysis modules process the data in order to fill elements to monitor. The second server part act in the same way as the data one. The created and filled histograms are sent to a monitor element collector which is in charge of publishing the received elements. The client part that wants to access these elements, sends a query to a data base. The process called Application control is an additional process that watches the state of the different DQM4HEP applications registered over the network. It is also possible through this process to reset or stop one of the application that is linked on the diagram that is to say a data collector, an analysis module or a monitor element collector.\n\n\n DIM network implementation\n\n\nAll of these processes are described in details in followings chapters of this document.\n\n\n\n\nDimCommand (receive)\n\n\nDimClient:: sendCommand(data)\n\n\nData sender\n\n\nDimCommand (receive)\n\n\nDimClient:: sendCommand(histo)\n\n\nAnalysis Module\n\n\nApplication Control (stop/reset/state)\n\n\nDimService DimRpc\n\n\nData collector\n\n\nDimInfo\n\n\nMonitor element collector\n\n\nDimService\n\n\nDimUpdatedInfo DimRpcInfo\n\n\nServer Client\n\n\nVizualisation system\n\n\n\n\nNetwork tools\n\n\nIn order to start/stop/reset applications or to get information of the running dqm system, executables and API tools are provided.\n\n\n\n\ndqm4hep_start_data_collector\n\n    Start a data collector application. This process is in charge of running the data collector. The only argument needed for this script is the collector name. For more details see Chapter 3.\n\n\ndqm4hep_stop_data_collector\nSend a command to the data collector application in order to stop it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_reset_data_collector\nSend a command to the data collector application in order to reset it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_get_data_collectors\nGet the list of running data collectors registered on the network.\nCHAPTER 2. NETWORK ASPECTS 6\n\n\ndqm4hep_get_data_collector_state\nGet the data collector state. The only argument needed for this script is the collector name.\n\n\ndqm4hep_start_module_application\nStart an analysis module application. This process is in charge of running the analysis module. The only argument needed for this script is a xml file. For more details see Chapter 4.\n\n\ndqm4hep_stop_module_application\nSend a command to the module application in order to stop it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_reset_module_application\nSend a command to the module application in order to reset it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_get_module_applications\nGet the list of running module applications registered on the network.\n\n\ndqm4hep_get_module_application_state\nGet the module application state. The only argument needed for this script is the module name.\n\n\ndqm4hep_start_monitor_element_collector\nStart a monitor element collector application. This process is in charge of running the monitor element collector. The only argument needed for this script is the collector name. For more details see Chapter 3.\n\n\ndqm4hep_stop_monitor_element_collector\nSend a command to the monitor element collector application in order to stop it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_reset_monitor_element_collector\nSend a command to the monitor element collector application in order to reset it. The only argument needed for this script is the collector name.\n\n\ndqm4hep_get_data_collectors\nGet the list of running monitor element collectors registered on the network.\n\n\ndqm4hep_get_monitor_element_collector_state\nGet the monitor element collector state. The only argument needed for this script is the collector name.\nThe same functionalities are available in C++ code. To send commands for starting/reset- ting/stopping an application or get its state, one can use the class DQMApplicationController with the following prototypes :\n\n\n\n\nclass DQMApplicationController :\n  {\n   public:\n    // ...\n    void sendResetCommand();\n    void sendStopCommand();\n    DQMState getApplicationState() const;\n};\n\n\n\n\nTo get the list of data/monitor element collectors or modules applications, one can use the class DQMNetworkTool with the following prototypes :\n\n\nclass DQMNetworkTool :\n  {\n   public:\n    // ...\n    static StringVector getDataCollectors();\n    static StringVector getMonitorElementCollectors();\n    static StringVector getModuleApplications();\n};\n\n\n\n\nCollectors\n\n\nCollectors are separated in two categories : data collectors and monitor element collectors. A collector aims to collect a given type of data from a unique or multiple sources and to re-distribute these data to clients that have subscribed to it. The two collectors types work in a relatively different way, in terms of capacity and client interface.\n\n\nData collectors\n\n\nA data collector is a process with which a data sender and data client(s) interact through the network in order to collect (DimCommand) and redistribute (DimService) data. The whole process is implemented in DQMDataCollectorApplication and DQMDataCollector.\n\n\nNext Figure illustrates the workflow of a data collector when an event is received from a sender and queried by a client. Users may pay attention that when a new event is received by the collector it will replace the previous one whether it has been sent to a client or not. This implies that if a client has not received event n and is not yet ready to receive it when event n+1 arrives in the collector, event n will be lost to the client.\n\n\n![PlaceHolder for Data collector workflow figure]\n\n\nData sender\n\n\nThe data sender is implemented in the class DQMDataSender. It is the primary step in the DQM system that feeds the system with data to process. Here is the class prototype :\n\n\n   class DQMDataSender :\n   {\n   public:\n     // ...\n     void       setCollectorName(const std::string \ncollectorName);\n     StatusCode sendEvent(DQMEvent *const pEvent);\n     void       setEventStreamer(DQMEventStreamer *pStreamer);\n};\n\n\n\n\nThe DQMEventStreamer is used to stream the event which will be sent by converting it into a raw buffer (char *). By default this class doesn\u2019t know which kind of data the user is going to send and thus no streamer is allocated: the user needs to provide one. See Chapter 5 for more details on data streaming and how to implement a DQMEventStreamer interface.\n\n\nThe collectorName variable is the name of the collector to which the data will be sent. The event is converted into a raw buffer by using the provided streamer and the buffer is sent to the collector. The sender does not require that the collector is running and does not wait for any answer from the collector when data are sent. This allows for a potential crash of a data collector without crashing the sender process. If a data packet is sent to a collector that doesn\u2019t exist or has crashed, it is lost. The user needs to take care that the collector name is the correct one before running the sender process.\nNo executable is provided since the event type to send is strongly typed and user defined.\n\n\nData client\n\n\nA map of clients keep track of :\n\n the client id\n\n whether the client is ready to receive data or not\n* whether the client has received the last available event or not\nThe data client works thus in both query and update mode. Its interface is implemented in the DQMDataClient class. Here is the class prototype :\n\n\n class DQMDataClient :\n{\npublic:\n  // ...\n  StatusCode connectToService();\n  StatusCode disconnectorFromService();\n  void       startReceive();\n  void       stopReceive();\n  void       setCollectorName(const std::string \ncollectorName);\n  DQMEvent  *takeEvent();\n  void       setEventStreamer(DQMEventStreamer *pStreamer);\n};\n\n\n\n\nThe collector with which the client interacts is specified in the method setCollectorName(name). The methods connectToService() (resp. disconnectFromService()) is used to initiate (resp. destroy) the connection to the collector. The methods startReceive() (stopReceive()) are used to unblock (block) the reception of data from the collector. As for the data sender interface, a DQMEventStreamer is needed to de-serialize the incoming event raw buffer and must have the same type as the sender one. An error will occur in case of bad de-serialization of the raw event buffer. A maximum of n consecutive errors (which can be specified by the user) is allowed before an exception is thrown, stopping the data client. This usually happens when the data type is not the same and the streamer is not able to decode the raw buffer each time an event is received.\nInternally, the queries to the collector are processed and data received until a queue of n events (settable by the user) is fulfilled. This helps avoiding to miss events in some situations. For example, in the spill structure of test-beams, a massive data flow is entering the DQM system in a short amount of time between pauses of a few seconds.\nThe method takeEvent() pop back the last received event in the queue (if any) and returns the pointer to the user. Since the pointer is removed from the queue, the responsibility to delete the event pointer is forwarded to the caller (user must delete the event).\nAs an example, the DQMDataClient class is used in the module application to receive data from a collector.\n\n\nMonitor element collectors\n\n\nA monitor element collector is a process with which a monitor element sender and monitor element client(s) interact through the network in order to collect (DimCommand) and redistribute (using RPCs: DimRpc) monitor elements. The whole process is implemented in DQMMonitorElementCollectorApplication and DQMMonitorElementCollector.\nAs soon as a monitor element packet is received from a monitor element sender, the packet is stored in a map of module name versus monitor element list. Unlike the data collector, the monitor element collector works only by query. It acts more or less like a data base. Queries are then made from a monitor element client. The collector answer to these queries in order to provide :\n\n\n\n\nA list of monitor element names and informations on them. This allows the user to browse the collector and see the elements stored in the collector. The query can be done using a filter on the module name, the monitor element name and the type.\n\n\nMonitor element collector\n\n\nSend monitor element packet to collector\n\n\nQuery monitor element list\n\n\nQuery monitor element list info with filter\n\n\nMonitor element client\n\n\nMonitor element sender\n\n\nA list of monitor elements. The client must send a list of pair of module name and monitor element name. This query is generally performed after having a look at the collector content using the previous query above.\n\n\n\n\n![PlaceHolder for Monitor element collector workflow]\n\n\nMonitor element sender\n\n\nThe monitor element sender works in the same way as the data sender. The interface is also similar:\n\n\n   class DQMMonitorElementSender :\n   {\n   public:\n     // ...\n     void       setCollectorName(const std::string \ncollectorName);\n     StatusCode sendMonitorElements(const std::string \nmoduleName, const\n       DQMMonitorElementList \nmeList);\n   };\n\n\n\n\nThe only difference here, is that no streamer has to be specified since it is internal to the package.\n\n\nMonitor element client\n\n\nThe monitor element client interface is implemented in the DQMMonitorElementClient class. Here is the class prototype :\n\n\n   class DQMMonitorElementClient :\n   {\n   public:\n     class Handler\n     {\n     // ...\n     virtual StatusCode receiveMonitorElementNameList(const\n       DQMMonitorElementInfoList \ninfoList) = 0;\n     virtual StatusCode receiveMonitorElementPublication(const\n       DQMMonitorElementPublication \npublication) = 0;\n     };\n     // ...\n     StatusCode connectToService();\n     StatusCode disconnectorFromService();\n     void       setCollectorName(const std::string \ncollectorName);\n     void       setHandler(Handler *pHandler);\n     StatusCode sendMonitorElementListNameRequest(const\n       DQMMonitorElementListNameRequest \nrequest);\n     StatusCode sendMonitorElementPublicationRequest(const\n       DQMMonitorElementRequest \nrequest);\n   };\n\n\n\n\nThe collector with which the client interacts is specified by the method setCollectorName(name). The methods connectToService() (resp. disconnectFromService()) is used to initiate (resp. destroy) the connection to the collector. The method sendMonitorElementListNameRequest(req) is used to send a query request for the monitor element name list to the collector. This avoids to query thousands of monitor elements to a collector just to know its content. For this query, a filter on the module name, monitor element name and type can be optionally used. Likewise, the method sendMonitorElementPublicationRequest(req) is used to query monitor elements. The request is sent using a query with pairs of list of module name and monitor element name.\nIn order to receive the answer of the collector, the nested class Handler has to be provided by the user. The implemented methods are call-backs called when the client receives the anwser from the collector. For example, if you send a request for a list of monitor element names, the user call-back method receiveMonitorElementNameList(list) will be processed when the collector answers the request. A handler has to be provided before performing any request to the monitor element client using the method setHandler(h).\n\n\nAnalysis modules\n\n\nIntroduction\n\n\nThe DQM system presented in this document offers the possibility to the user to process its own online analysis on raw data coming from a data collector (Chapter 3). The base processing unit is called a module (class DQMModule) that the user has to implement himself. A module instance is run in a module application (one module per application) and process incoming data in specific application flow organized in runs and cycles as shown on next figure\n\n\n![PlaceHolder for Module Applcation Flow]\n\n\nThe application flow is as follow :\n\n\n\n\nInit : the application is initialized. The application subscribes to a run control, configure the cycle, the archiver, subscribe to the data service, load the user module plug-in and initialize it. The application waits for a start of run signal.\n\n\nStart of run : the application has received a start of run signal. If the run has already begun when the application is launched, the application starts immediately the current run after initialisation.\n\n\nStart of cycle : As soon as the run has started, the application starts to receive data from the service. A cycle starts and a series of processEvent(evt) call starts (see section 4.2).\n\n\nProcess event : received events are forwarded to the user module in order to process it.\n\n\nEnd of cycle : the cycle ends. The monitor elements produced/filled by the user module are sent to the monitor element collector. If the archiver has been initialized (optional), the list of monitor elements is archived. Many possibilities may happened here, i) a new cycle starts, ii) the current run stops, iii) a new run starts.\n\n\nEnd of run : the current run stops. This happens when a run is stopped or when a new run is started.\n\n\nEnd : the application ends. The module application never stops by itself. A signal must be sent to tell the application to exit. This can be done by pressing the CTRL+C key sequence in the console where the application is running. An other possibility is to start the dqm control graphical user interface, to select the application among the available application list and to press the stop button. Note that this last feature is enabled only if the package is compiled with Qt (see InstallationGuide.pdf).\n4.2 Cycles\nAs shown on figure 4.1 and explained above, the application work-flow is scheduled by cycles after the start of run signal received. A cycle is series of processEvent(evt) call, where the user process events and fill monitor elements. At the end of a cycle, the filled monitor elements are sent to the collector. This structure has been chosen for many reasons :\n\n\nThe user needs enough statistics in order to analyse the incoming data and to send relevant monitor elements.\n\n\nReproduce a sequence of incoming data. For instance :\n\u2013 a spill structure that spends 30 seconds in which a detector takes 5 seconds of data acquisition.\n\u2013 a spill structure that spends 30 seconds in which a detector accumulates 100 Mo of data.\n\n\nFor performance reasons, it is not relevant to send, for example, a packet of 1000 monitor elements each time an event is processed.\nThe software provides two kinds of cycles :\n\n\nA timer cycle (TimerCycle) : a cycle that spends n seconds to process events. The default time is set to 30 seconds.\n\n\nAn event counter cycle (EventCounterCycle) : a cycle that process n events before ending. The default counter is set to 100 events.\nFor each cycle type, a timeout is also defined. If during n seconds no event is processed, the cycles ends. The default timeout is set to 5 seconds.\nThe cycle properties are configurable through an xml file that the user must provides while launching a module application. See section 4.5 for a concrete xml file.\nCHAPTER 4. ANALYSIS MODULES 15 4.3 Monitor elements\nA monitor element is wrapper of the ROOT class TObject, mother class of most of the ROOT classes. It provides also more features designed for a DQM system :\n\n\nA quality flag : the user can assign a quality tag to the monitor element. Possible values are No Quality, Very Good, Good, Normal, Bad, Very Bad. This flag is used of the user interface the monitor elements are visualized to sort them, color them, etc ... Default is No Quality.\n\n\nA reset policy flag : a flag that determinates when the monitor element has to be reset in the application workflow. Possible values are No Reset, At End Of Run, At End Of Cycle. The module application will reset the element automatically at the correct moment. If you don\u2019t want an automatic reset, set the flag to No Reset. The user can also reset by himself the monitor element by calling the method reset() of the DQMMonitorElement class. The default flag is At End Of Run.\n\n\nA name : a unique name of the element within an application.\n\n\nA title : A short description of the element\n\n\nA description : A long description of the element\n\n\nA run number : the current run number when the element is sent to the collector.\n\n\nA publish flag : A boolean value that determines whether the element has to be sent to the collector. This is a useful feature when a particular monitor element has, for instance, not enough statistics to be relevant and the user doesn\u2019t want to make it available in the monitor element collector.\n\n\nA directory path : A path in an internal directory structure (see DQMStorage class) used in the user interface.\nThe booking of monitor elements is performed through the DQMModuleApi class. See section 4.5 for a concrete usage.\n4.4 Archiver\nThe framework offers the possibility to write out monitor elements in a ROOT TFile. This feature is available in DQMArchiver class with the following prototype :\nCHAPTER 4. ANALYSIS MODULES 16\n    class DQMArchiver :\n   {\n   public:\n   // ...\n   // open an archive with the given name and opening mode.\n   // Extension .root is added\n   StatusCode open(const std::string \narchiveFileName, const std::string\n       \nopeningMode);\n   // close the opened archive\n   StatusCode close();\n   // archive the module. If archiveAll is set to false, only\n   // the monitor elements with the publish flag set to true\n   // will be written\n   StatusCode archive(DQMModule *pModule, bool archiveAll = true);\n   // get the file name\n   const std::string \ngetFileName() const;\n   // Whether an archive is opened\n   bool isOpened() const;\n   // get the opening mode as provided in the open() method\n   const std::string \ngetOpeningMode() const;\n};\nIn a module application, an internal archiver is available and activated through the xml steering file (see section 4.5). It will archive all the monitor elements with the publish flag set to true in a root file.\n4.5 Example\nIn order to clarify the tools introduced above, we provide here a complete example of a dqm module. For the event data model, we choose the only built-in one, the LCIO event interface EVENT::LCCEvent. Concretely, a dqm module a simple class that implements the DQMModule class.\nFor this example, we suppose that our data are coming from a calorimeter and provides reconstructed EVENT::Calorimeter objects. The cycle is configured to be a cycle of 15 seconds with a time-out of 6 seconds.\n4.5.1 Module implementation\nHere is the header file :\n   // ExampleModule.h file\n   #include \"dqm4hep/module/DQMModule.h\"\n\n\n\n\nCHAPTER 4. ANALYSIS MODULES 17\n using namespace dqm4hep;\nclass ExampleModule : public DQMModule\n{\npublic:\nExampleModule();\nStatusCode initModule();\nStatusCode readSettings(const TiXmlHandle \nxmlHandle);\nStatusCode processEvent(DQMEvent \npEvent);\nStatusCode startOfCycle();\nStatusCode endOfCycle();\nStatusCode startOfRun(DQMRun \npRun);\nStatusCode endOfRun(DQMRun \npRun);\nStatusCode resetModule();\nStatusCode endModule();\nprivate:\n// elements\nDQMMonitorElement\nDQMMonitorElement\nDQMMonitorElement\nDQMMonitorElement\n\nm_pNumberOfHitsHistogram;\n\nm_pEnergyHistogram;\n\nm_pHitTimeWithinSpill;\n*m_pXYHitPositionsHistogram;\n// additional parameters\nstd::string\nunsigned int\nfloat\nfloat\n};\nm_collectionName;\nm_minNHitToPublish;\nm_minHitPosition;\nm_maxHitPosition;\nHere the header of the implementation file :\n   // our header include\n   #include \"ExampleModule.h\"\n   #include \"dqm4hep/core/DQMMonitorElement.h\"\n   #include \"dqm4hep/core/DQMRun.h\"\n   #include \"dqm4hep/core/DQMXmlHelper.h\"\n   #include \"dqm4hep/module/DQMModuleApi.h\"\n   ExampleModule anExampleModule;\nAn instance of our module is declared in the implementation file. When the plugin will be loaded, the instance of our module will be automatically registered in the application.\n\n\nCHAPTER 4. ANALYSIS MODULES 18\n    ExampleModule::ExampleModule() :\n     DQMModule(\"ExampleModule\")\n   {\n     setDetectorName(\"MySweetCalorimeter\");\n     setVersion(1, 0, 0);\n}\nThe constructor gives simply a type to our module. The name of the module will be decided at runtime. The (sub)detector name is set and the version. The latter may be used to identify the version of the module through the user interface.\n   StatusCode ExampleModule::readSettings(const TiXmlHandle \nxmlHandle)\n   {\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"CollectionName\", m_collectionName));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MinNHitToPublish\", m_minNHitToPublish));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MinHitPosition\", m_minHitPosition));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MaxHitPosition\", m_maxHitPosition));\n     return STATUS_CODE_SUCCESS;\n   }\nThe settings are read from the xml handle. The xml helper helps to read the values. For instance, the collection name in our event is labelled by \"CollectionName\" and will be put in the string m_collectionName.\n   StatusCode ExampleModule::initModule()\n   {\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Hits\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Energy\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Time\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, \"/Hits\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookIntHistogram1D(this,\n     m_pNumberOfHitsHistogram, \"NumberOfHits\", \"Number of hits\", 1501, 0, 1500));\n\n\nCHAPTER 4. ANALYSIS MODULES 19 RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this,\n       \"/Energy\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookFloatHistogram1D(this,\n     m_pEnergyHistogram, \"HitEnergy\", \"Hits energy\", 101, 0, 100));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, \"/Time\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookFloatHistogram1D(this,\n     m_pHitTimeWithinSpill, \"HitTimeWithinSpill\", \"Hit time within a spill\",\n       101, 0, 100));\n     m_pHitTimeWithinSpill-\nsetResetPolicy(RESET_AT_END_OF_CYCLE);\n     DQMModuleApi::cd(this);\n     DQMModuleApi::ls(this, true);\n     return STATUS_CODE_SUCCESS;\n   }\nThe three first lines create internal directories to store the monitor elements. The next line changes the current directory to \"/Hits\". The two next lines book monitor elements. The first one is a histogram in 1D of int type, with name \"NumberOfHits\", title \"Number of hits\", with 1501 bins from 0 up to 1500. Note that the second argument is a null pointer on a monitor element. The latter is allocated in the function. The directory is again changed in order to book the \"HitEnergy\" histogram and \"HitTimeWithinSpill\" in two different directories. The last booked element has an additional line to set the reset policy. Since a cycle corresponds in our case to a spill, we want to reset this element at the end of each cycle. The two last lines change the current directory to the root one and print the structure in the console recursively (true as second argument).\n   StatusCode ExampleModule::processEvent(DQMEvent \npEvent)\n   {\n     EVENT::LCEvent \npLCEvent = pEvent-\ngetEvent\n();\n     if(NULL == pLCEvent)\n       return STATUS_CODE_FAILURE;\n     EVENT::LCCollection *pCaloHitCollection =\n       pLCEvent-\ngetCollection(m_collectionName);\n\n\nCHAPTER 4. ANALYSIS MODULES 20\n      for(unsigned int e=0 ; e\ngetNumberOfElements() ; e++)\n     {\n       EVENT::CalorimeterHit \npCaloHit = pCaloHitCollection-\ngetElementAt(e);\n       if(NULL == pCaloHit)\n         continue;\n       m_pEnergyHistogram-\nget\n()-\nFill(pCaloHit-\ngetEnergy());\n       m_pHitTimeWithinSpill-\nget\n()-\nFill(pCaloHit-\ngetTime());\n     }\n     m_pNumberOfHitsHistogram-\nget\n()\n       -\nFill(pCaloHitCollection-\ngetNumberOfElements());\n     return STATUS_CODE_SUCCESS;\n   }\nHere is the most interesting part of the module. The processEvent(evt) function receives the data coming from the collector as soon as it is available. The DQMEvent class wraps an event that you can access via the template method getEvent\n(). In the example here, a EVENT::LCEvent is cast. It is usually a good idea to check that the event is correctly cast (NULL pointer comparison). Our calorimeter hit collection is then accessed. Inside the loop, the accessors on wrapped TObject work also by template method. Use the method get\n() to get the corresponding class. This class must corresponds to the type declared while booking the element. For instance, if a float histogram 1D is booked, the user must cast it into a TH1F by using the get\n() method. For the available methods you can use on the ROOT cast object, please refers to the ROOT documentation on the official website.\n   StatusCode ExampleModule::startOfCycle()\n   {\n     // no operation\n     return STATUS_CODE_SUCCESS;\n   }\n   StatusCode ExampleModule::endOfCycle()\n   {\n     double meanNHit = m_pNumberOfHitsHistogram-\nget\n()-\nGetMean();\n     if(meanNHit \n 160 \n meanNHit \n 180)\n       m_pNumberOfHitsHistogram-\nsetQuality(GOOD_QUALITY);\n     else\n       m_pNumberOfHitsHistogram-\nsetQuality(BAD_QUALITY);\n     if(m_pNumberOfHitsHistogram-\nget\n()-\nGetEntries() \n 500)\n       m_pNumberOfHitsHistogram-\nsetToPublish(false);\n     else\n       m_pNumberOfHitsHistogram-\nsetToPublish(true);\n     return STATUS_CODE_SUCCESS;\n   }\n For the start of cycle, we have nothing to process. But for the end of cycle, it is usually\nCHAPTER 4. ANALYSIS MODULES 21\nthe place where we evaluate quality of the processed data. In our case, we evaluate the quality of the number of hits histogram by looking at the mean within a range. We also check that enough data have been processed to publish our histogram.\n   StatusCode ExampleModule::startOfRun(DQMRun \npRun)\n   {\n     std::cout \n \"Module : \" \n getName() \n \" -- startOfRun()\" \n std::endl;\n     std::cout \n \"Run no \" \n pRun-\ngetRunNumber() \n std::endl;\n     std::string timeStr;\n     DQMCoreTool::timeToHMS(pRun-\ngetStartTime(), timeStr);\n     std::cout \n \"Starting time : \" \n timeStr \n std::endl;\n     return STATUS_CODE_SUCCESS;\n   }\n   StatusCode ExampleModule::endOfRun(DQMRun \npRun)\n   {\n     std::cout \n \"Module : \" \n getName() \n \" -- startOfRun()\" \n std::endl;\n     std::cout \n \"Run no \" \n pRun-\ngetRunNumber() \n std::endl;\n     std::string timeStr;\n     DQMCoreTool::timeToHMS(pRun-\ngetStartTime(), timeStr);\n     std::cout \n \"Ending time : \" \n timeStr \n std::endl;\n     return STATUS_CODE_SUCCESS;\n   }\nFor the start of run and end of run, we just do some printout. This is also the place where you may initiate a connection with a database to grab useful information for the next run.\n   StatusCode ExampleModule::resetModule()\n   {\n     return DQMModuleApi::resetMonitorElements(this);\n   }\n   StatusCode ExampleModule::endModule()\n   {\n     // no operation\n     return STATUS_CODE_SUCCESS;\n   }\nThe reset function simply reset all the monitor elements booked by this module by using the module API. No operation is processed in the endModule() function.\n4.5.2 Steering file\n4.5.3 Compiling the example\nSince the package is compiled using CMake, we propose here to compile our example with CMake. We propose the following directory structure :\n\n root\n* source\n\n\nCHAPTER 4. ANALYSIS MODULES 22\n\n ExampleModule.h\n\n ExampleModule.cc * build\n\n xml\n\n ExampleModule.xml\n* CMakeLists.txt\nIn the source directory our source files are put, the steering file for our application in the xml directory and the CMakeLists.txt file in the root directory. The steering file contents will be described in the next section. The CMakeLists.txt is needed to generate the MakeFile according to your plateform. Here is a complete CMakeLists.txt to compile our example :\n\n\n# CMakeList.txt for ExampleModule\nCMAKE_MINIMUM_REQUIRED( VERSION 2.6 FATAL_ERROR )\n# project name\nPROJECT( ExampleModule )\n# append DQM4HEPConfig.cmake location to the default cmake module list\n\nLIST( APPEND CMAKE_MODULE_PATH path/to/dqm4hep )\n# load dqm4hep package\nFIND_PACKAGE( DQM4HEP REQUIRED )\n# include the dqm4hep directories\nINCLUDE_DIRECTORIES( ${DQM4HEP_INCLUDE_DIRS} )\n# link lbDQM4HEP.so (.dylib) to our library\nLINK_LIBRARIES( ${DQM4HEP_LIBRARIES} )\n# add specific flags to compilation from dqm4hep soft\nADD_DEFINITIONS ( ${DQM4HEP_DEFINITIONS} )\n# specify where our includes are\nINCLUDE_DIRECTORIES( source )\n# build our shared library libModuleExample.so (.dylib)\nADD_SHARED_LIBRARY( ExampleModule source/ExampleModule.cc )\n# install the shared library in the lib directory\nINSTALL(\n      TARGETS ExampleModule\n      LIBRARY DESTINATION lib\n)\n\n\n\n\n4.5.4 Running the example\nChapter 5\nData streaming\n5.1 Streaming interface\n5.2 Data streamer plugin\n23\nChapter 6\nELog interface\n24", 
            "title": "Developer guide"
        }, 
        {
            "location": "/manual/devguide/#installation", 
            "text": "The installation of the software is described in the  InstallationGuide .", 
            "title": "Installation"
        }, 
        {
            "location": "/manual/devguide/#directory-structure-and-contents", 
            "text": "Before compiling the package, you will find in the root directory :   cmake  : A directory containing cmake scripts needed to configure the application at compile time  CMakeLists.txt  : The top level cmake file needed to compile the package  COPYING.txt  : The GPL licence of the software  dim4mac  : A directory containing instructions and patches to compile DIM on Ma- cOSX systems  doc  : A directory containing the documentation of the software. A developer guide, an installation guide and a user guide is present. If the package is compiled with Doxygen, you will find the output code documentation in html and latex  icons  : A directory containing icons for the visualisation system  INSTALL.txt  : A file that forward the user to the installation guide in the doc directory  README.txt  : A read-me file  source  : The directory that contains all the sources of the package. You will find also an example directory with some plug-ins samples  bin  : A directory containing all the binaries.  DQM4HEPConfig.cmake  : The cmake script to load via the cmake command find_package(DQM4HEP) in a CMakeLists.txt file. This is the case for the data sending interface use and analysis module implementation in a separate project.  DQM4HEPConfigVersion.cmake  : A cmake script to load the package version correctly in user\u2019s projects.  lib  : A directory containing the shared libraries.   Except for the README.txt, INSTALL.txt and COPYING.txt all the files and directories are needed to compile correctly the package. After running the make install command in the installation process, some directories and files are appended to the package :", 
            "title": "Directory structure and contents"
        }, 
        {
            "location": "/manual/devguide/#global-overview", 
            "text": "The key points of this software are :   A standalone run control : the software provides a run control service/client to send/receive start of run (SOR) and end of run (EOR) commands together with a run number, start/end time, run description and detector name.  A data distributing system : it provides a sender interface to send data to data collectors: A data collector to collect data, and a client interface to receive these data on update signal (Automatic or request from the user).  An analysis plug-in system : it provides a plug-in mechanism for user analysis module that :  processes incoming data in the DQM system  produces monitor elements which can be histograms, profiles, scalars, strings, etc.  redistributes monitor elements to a dedicated collector via a sender interface.  Visualisation interfaces : graphical user interfaces (GUI) to control the DQM processes and to visualise monitor elements coming from user analysis modules.", 
            "title": "Global overview"
        }, 
        {
            "location": "/manual/devguide/#network-aspects", 
            "text": "", 
            "title": "Network aspects"
        }, 
        {
            "location": "/manual/devguide/#dim-implementation", 
            "text": "The  DIM network implementation   is used as a DNS node (DIM Name Server\nNode) where all the services are registered. When a client wants to subscribe to a service, he requests the service machine to the DNS node which forward the connection to the machine on which the service is running.\nA connection is thus created between the server machine and the client one and they start to communicate with a TPC/IP socket.\nThe default port used to initiate a connection is 2505 which can be changed by exporting the DIM_DNS_PORT environment variable. For application servers, one needs to export the environment variable DIM_DNS_NODE to the host name of the machine where the dns is running.   DQM4HEP network implementation", 
            "title": "DIM implementation"
        }, 
        {
            "location": "/manual/devguide/#dqm4hep-implementation", 
            "text": "Since DQM4HEP uses DIM as network interface, the architecture looks the same. The dif- ferent parts of the software are split in different processes that can be run either on the same machine or on multiple ones. Theses processes are connected by DIM services and clients.  Next figure shows the different processes implemented in DQM4HEP. The red part represents the clients processes and in blue the server processes. The data sender process sends data usually coming from DAQ systems or files in order to feed the data collector. The collected data are then re-distributed to data clients.\nFrom here the analysis modules process the data in order to fill elements to monitor. The second server part act in the same way as the data one. The created and filled histograms are sent to a monitor element collector which is in charge of publishing the received elements. The client part that wants to access these elements, sends a query to a data base. The process called Application control is an additional process that watches the state of the different DQM4HEP applications registered over the network. It is also possible through this process to reset or stop one of the application that is linked on the diagram that is to say a data collector, an analysis module or a monitor element collector.   DIM network implementation  All of these processes are described in details in followings chapters of this document.   DimCommand (receive)  DimClient:: sendCommand(data)  Data sender  DimCommand (receive)  DimClient:: sendCommand(histo)  Analysis Module  Application Control (stop/reset/state)  DimService DimRpc  Data collector  DimInfo  Monitor element collector  DimService  DimUpdatedInfo DimRpcInfo  Server Client  Vizualisation system", 
            "title": "DQM4HEP implementation"
        }, 
        {
            "location": "/manual/devguide/#network-tools", 
            "text": "In order to start/stop/reset applications or to get information of the running dqm system, executables and API tools are provided.   dqm4hep_start_data_collector \n    Start a data collector application. This process is in charge of running the data collector. The only argument needed for this script is the collector name. For more details see Chapter 3.  dqm4hep_stop_data_collector\nSend a command to the data collector application in order to stop it. The only argument needed for this script is the collector name.  dqm4hep_reset_data_collector\nSend a command to the data collector application in order to reset it. The only argument needed for this script is the collector name.  dqm4hep_get_data_collectors\nGet the list of running data collectors registered on the network.\nCHAPTER 2. NETWORK ASPECTS 6  dqm4hep_get_data_collector_state\nGet the data collector state. The only argument needed for this script is the collector name.  dqm4hep_start_module_application\nStart an analysis module application. This process is in charge of running the analysis module. The only argument needed for this script is a xml file. For more details see Chapter 4.  dqm4hep_stop_module_application\nSend a command to the module application in order to stop it. The only argument needed for this script is the collector name.  dqm4hep_reset_module_application\nSend a command to the module application in order to reset it. The only argument needed for this script is the collector name.  dqm4hep_get_module_applications\nGet the list of running module applications registered on the network.  dqm4hep_get_module_application_state\nGet the module application state. The only argument needed for this script is the module name.  dqm4hep_start_monitor_element_collector\nStart a monitor element collector application. This process is in charge of running the monitor element collector. The only argument needed for this script is the collector name. For more details see Chapter 3.  dqm4hep_stop_monitor_element_collector\nSend a command to the monitor element collector application in order to stop it. The only argument needed for this script is the collector name.  dqm4hep_reset_monitor_element_collector\nSend a command to the monitor element collector application in order to reset it. The only argument needed for this script is the collector name.  dqm4hep_get_data_collectors\nGet the list of running monitor element collectors registered on the network.  dqm4hep_get_monitor_element_collector_state\nGet the monitor element collector state. The only argument needed for this script is the collector name.\nThe same functionalities are available in C++ code. To send commands for starting/reset- ting/stopping an application or get its state, one can use the class DQMApplicationController with the following prototypes :   class DQMApplicationController :\n  {\n   public:\n    // ...\n    void sendResetCommand();\n    void sendStopCommand();\n    DQMState getApplicationState() const;\n};  To get the list of data/monitor element collectors or modules applications, one can use the class DQMNetworkTool with the following prototypes :  class DQMNetworkTool :\n  {\n   public:\n    // ...\n    static StringVector getDataCollectors();\n    static StringVector getMonitorElementCollectors();\n    static StringVector getModuleApplications();\n};", 
            "title": "Network tools"
        }, 
        {
            "location": "/manual/devguide/#collectors", 
            "text": "Collectors are separated in two categories : data collectors and monitor element collectors. A collector aims to collect a given type of data from a unique or multiple sources and to re-distribute these data to clients that have subscribed to it. The two collectors types work in a relatively different way, in terms of capacity and client interface.", 
            "title": "Collectors"
        }, 
        {
            "location": "/manual/devguide/#data-collectors", 
            "text": "A data collector is a process with which a data sender and data client(s) interact through the network in order to collect (DimCommand) and redistribute (DimService) data. The whole process is implemented in DQMDataCollectorApplication and DQMDataCollector.  Next Figure illustrates the workflow of a data collector when an event is received from a sender and queried by a client. Users may pay attention that when a new event is received by the collector it will replace the previous one whether it has been sent to a client or not. This implies that if a client has not received event n and is not yet ready to receive it when event n+1 arrives in the collector, event n will be lost to the client.  ![PlaceHolder for Data collector workflow figure]", 
            "title": "Data collectors"
        }, 
        {
            "location": "/manual/devguide/#data-sender", 
            "text": "The data sender is implemented in the class DQMDataSender. It is the primary step in the DQM system that feeds the system with data to process. Here is the class prototype :     class DQMDataSender :\n   {\n   public:\n     // ...\n     void       setCollectorName(const std::string  collectorName);\n     StatusCode sendEvent(DQMEvent *const pEvent);\n     void       setEventStreamer(DQMEventStreamer *pStreamer);\n};  The DQMEventStreamer is used to stream the event which will be sent by converting it into a raw buffer (char *). By default this class doesn\u2019t know which kind of data the user is going to send and thus no streamer is allocated: the user needs to provide one. See Chapter 5 for more details on data streaming and how to implement a DQMEventStreamer interface.  The collectorName variable is the name of the collector to which the data will be sent. The event is converted into a raw buffer by using the provided streamer and the buffer is sent to the collector. The sender does not require that the collector is running and does not wait for any answer from the collector when data are sent. This allows for a potential crash of a data collector without crashing the sender process. If a data packet is sent to a collector that doesn\u2019t exist or has crashed, it is lost. The user needs to take care that the collector name is the correct one before running the sender process.\nNo executable is provided since the event type to send is strongly typed and user defined.", 
            "title": "Data sender"
        }, 
        {
            "location": "/manual/devguide/#data-client", 
            "text": "A map of clients keep track of :  the client id  whether the client is ready to receive data or not\n* whether the client has received the last available event or not\nThe data client works thus in both query and update mode. Its interface is implemented in the DQMDataClient class. Here is the class prototype :   class DQMDataClient :\n{\npublic:\n  // ...\n  StatusCode connectToService();\n  StatusCode disconnectorFromService();\n  void       startReceive();\n  void       stopReceive();\n  void       setCollectorName(const std::string  collectorName);\n  DQMEvent  *takeEvent();\n  void       setEventStreamer(DQMEventStreamer *pStreamer);\n};  The collector with which the client interacts is specified in the method setCollectorName(name). The methods connectToService() (resp. disconnectFromService()) is used to initiate (resp. destroy) the connection to the collector. The methods startReceive() (stopReceive()) are used to unblock (block) the reception of data from the collector. As for the data sender interface, a DQMEventStreamer is needed to de-serialize the incoming event raw buffer and must have the same type as the sender one. An error will occur in case of bad de-serialization of the raw event buffer. A maximum of n consecutive errors (which can be specified by the user) is allowed before an exception is thrown, stopping the data client. This usually happens when the data type is not the same and the streamer is not able to decode the raw buffer each time an event is received.\nInternally, the queries to the collector are processed and data received until a queue of n events (settable by the user) is fulfilled. This helps avoiding to miss events in some situations. For example, in the spill structure of test-beams, a massive data flow is entering the DQM system in a short amount of time between pauses of a few seconds.\nThe method takeEvent() pop back the last received event in the queue (if any) and returns the pointer to the user. Since the pointer is removed from the queue, the responsibility to delete the event pointer is forwarded to the caller (user must delete the event).\nAs an example, the DQMDataClient class is used in the module application to receive data from a collector.", 
            "title": "Data client"
        }, 
        {
            "location": "/manual/devguide/#monitor-element-collectors", 
            "text": "A monitor element collector is a process with which a monitor element sender and monitor element client(s) interact through the network in order to collect (DimCommand) and redistribute (using RPCs: DimRpc) monitor elements. The whole process is implemented in DQMMonitorElementCollectorApplication and DQMMonitorElementCollector.\nAs soon as a monitor element packet is received from a monitor element sender, the packet is stored in a map of module name versus monitor element list. Unlike the data collector, the monitor element collector works only by query. It acts more or less like a data base. Queries are then made from a monitor element client. The collector answer to these queries in order to provide :   A list of monitor element names and informations on them. This allows the user to browse the collector and see the elements stored in the collector. The query can be done using a filter on the module name, the monitor element name and the type.  Monitor element collector  Send monitor element packet to collector  Query monitor element list  Query monitor element list info with filter  Monitor element client  Monitor element sender  A list of monitor elements. The client must send a list of pair of module name and monitor element name. This query is generally performed after having a look at the collector content using the previous query above.   ![PlaceHolder for Monitor element collector workflow]", 
            "title": "Monitor element collectors"
        }, 
        {
            "location": "/manual/devguide/#monitor-element-sender", 
            "text": "The monitor element sender works in the same way as the data sender. The interface is also similar:     class DQMMonitorElementSender :\n   {\n   public:\n     // ...\n     void       setCollectorName(const std::string  collectorName);\n     StatusCode sendMonitorElements(const std::string  moduleName, const\n       DQMMonitorElementList  meList);\n   };  The only difference here, is that no streamer has to be specified since it is internal to the package.", 
            "title": "Monitor element sender"
        }, 
        {
            "location": "/manual/devguide/#monitor-element-client", 
            "text": "The monitor element client interface is implemented in the DQMMonitorElementClient class. Here is the class prototype :     class DQMMonitorElementClient :\n   {\n   public:\n     class Handler\n     {\n     // ...\n     virtual StatusCode receiveMonitorElementNameList(const\n       DQMMonitorElementInfoList  infoList) = 0;\n     virtual StatusCode receiveMonitorElementPublication(const\n       DQMMonitorElementPublication  publication) = 0;\n     };\n     // ...\n     StatusCode connectToService();\n     StatusCode disconnectorFromService();\n     void       setCollectorName(const std::string  collectorName);\n     void       setHandler(Handler *pHandler);\n     StatusCode sendMonitorElementListNameRequest(const\n       DQMMonitorElementListNameRequest  request);\n     StatusCode sendMonitorElementPublicationRequest(const\n       DQMMonitorElementRequest  request);\n   };  The collector with which the client interacts is specified by the method setCollectorName(name). The methods connectToService() (resp. disconnectFromService()) is used to initiate (resp. destroy) the connection to the collector. The method sendMonitorElementListNameRequest(req) is used to send a query request for the monitor element name list to the collector. This avoids to query thousands of monitor elements to a collector just to know its content. For this query, a filter on the module name, monitor element name and type can be optionally used. Likewise, the method sendMonitorElementPublicationRequest(req) is used to query monitor elements. The request is sent using a query with pairs of list of module name and monitor element name.\nIn order to receive the answer of the collector, the nested class Handler has to be provided by the user. The implemented methods are call-backs called when the client receives the anwser from the collector. For example, if you send a request for a list of monitor element names, the user call-back method receiveMonitorElementNameList(list) will be processed when the collector answers the request. A handler has to be provided before performing any request to the monitor element client using the method setHandler(h).", 
            "title": "Monitor element client"
        }, 
        {
            "location": "/manual/devguide/#analysis-modules", 
            "text": "", 
            "title": "Analysis modules"
        }, 
        {
            "location": "/manual/devguide/#introduction", 
            "text": "The DQM system presented in this document offers the possibility to the user to process its own online analysis on raw data coming from a data collector (Chapter 3). The base processing unit is called a module (class DQMModule) that the user has to implement himself. A module instance is run in a module application (one module per application) and process incoming data in specific application flow organized in runs and cycles as shown on next figure  ![PlaceHolder for Module Applcation Flow]  The application flow is as follow :   Init : the application is initialized. The application subscribes to a run control, configure the cycle, the archiver, subscribe to the data service, load the user module plug-in and initialize it. The application waits for a start of run signal.  Start of run : the application has received a start of run signal. If the run has already begun when the application is launched, the application starts immediately the current run after initialisation.  Start of cycle : As soon as the run has started, the application starts to receive data from the service. A cycle starts and a series of processEvent(evt) call starts (see section 4.2).  Process event : received events are forwarded to the user module in order to process it.  End of cycle : the cycle ends. The monitor elements produced/filled by the user module are sent to the monitor element collector. If the archiver has been initialized (optional), the list of monitor elements is archived. Many possibilities may happened here, i) a new cycle starts, ii) the current run stops, iii) a new run starts.  End of run : the current run stops. This happens when a run is stopped or when a new run is started.  End : the application ends. The module application never stops by itself. A signal must be sent to tell the application to exit. This can be done by pressing the CTRL+C key sequence in the console where the application is running. An other possibility is to start the dqm control graphical user interface, to select the application among the available application list and to press the stop button. Note that this last feature is enabled only if the package is compiled with Qt (see InstallationGuide.pdf).\n4.2 Cycles\nAs shown on figure 4.1 and explained above, the application work-flow is scheduled by cycles after the start of run signal received. A cycle is series of processEvent(evt) call, where the user process events and fill monitor elements. At the end of a cycle, the filled monitor elements are sent to the collector. This structure has been chosen for many reasons :  The user needs enough statistics in order to analyse the incoming data and to send relevant monitor elements.  Reproduce a sequence of incoming data. For instance :\n\u2013 a spill structure that spends 30 seconds in which a detector takes 5 seconds of data acquisition.\n\u2013 a spill structure that spends 30 seconds in which a detector accumulates 100 Mo of data.  For performance reasons, it is not relevant to send, for example, a packet of 1000 monitor elements each time an event is processed.\nThe software provides two kinds of cycles :  A timer cycle (TimerCycle) : a cycle that spends n seconds to process events. The default time is set to 30 seconds.  An event counter cycle (EventCounterCycle) : a cycle that process n events before ending. The default counter is set to 100 events.\nFor each cycle type, a timeout is also defined. If during n seconds no event is processed, the cycles ends. The default timeout is set to 5 seconds.\nThe cycle properties are configurable through an xml file that the user must provides while launching a module application. See section 4.5 for a concrete xml file.\nCHAPTER 4. ANALYSIS MODULES 15 4.3 Monitor elements\nA monitor element is wrapper of the ROOT class TObject, mother class of most of the ROOT classes. It provides also more features designed for a DQM system :  A quality flag : the user can assign a quality tag to the monitor element. Possible values are No Quality, Very Good, Good, Normal, Bad, Very Bad. This flag is used of the user interface the monitor elements are visualized to sort them, color them, etc ... Default is No Quality.  A reset policy flag : a flag that determinates when the monitor element has to be reset in the application workflow. Possible values are No Reset, At End Of Run, At End Of Cycle. The module application will reset the element automatically at the correct moment. If you don\u2019t want an automatic reset, set the flag to No Reset. The user can also reset by himself the monitor element by calling the method reset() of the DQMMonitorElement class. The default flag is At End Of Run.  A name : a unique name of the element within an application.  A title : A short description of the element  A description : A long description of the element  A run number : the current run number when the element is sent to the collector.  A publish flag : A boolean value that determines whether the element has to be sent to the collector. This is a useful feature when a particular monitor element has, for instance, not enough statistics to be relevant and the user doesn\u2019t want to make it available in the monitor element collector.  A directory path : A path in an internal directory structure (see DQMStorage class) used in the user interface.\nThe booking of monitor elements is performed through the DQMModuleApi class. See section 4.5 for a concrete usage.\n4.4 Archiver\nThe framework offers the possibility to write out monitor elements in a ROOT TFile. This feature is available in DQMArchiver class with the following prototype :\nCHAPTER 4. ANALYSIS MODULES 16\n    class DQMArchiver :\n   {\n   public:\n   // ...\n   // open an archive with the given name and opening mode.\n   // Extension .root is added\n   StatusCode open(const std::string  archiveFileName, const std::string\n        openingMode);\n   // close the opened archive\n   StatusCode close();\n   // archive the module. If archiveAll is set to false, only\n   // the monitor elements with the publish flag set to true\n   // will be written\n   StatusCode archive(DQMModule *pModule, bool archiveAll = true);\n   // get the file name\n   const std::string  getFileName() const;\n   // Whether an archive is opened\n   bool isOpened() const;\n   // get the opening mode as provided in the open() method\n   const std::string  getOpeningMode() const;\n};\nIn a module application, an internal archiver is available and activated through the xml steering file (see section 4.5). It will archive all the monitor elements with the publish flag set to true in a root file.\n4.5 Example\nIn order to clarify the tools introduced above, we provide here a complete example of a dqm module. For the event data model, we choose the only built-in one, the LCIO event interface EVENT::LCCEvent. Concretely, a dqm module a simple class that implements the DQMModule class.\nFor this example, we suppose that our data are coming from a calorimeter and provides reconstructed EVENT::Calorimeter objects. The cycle is configured to be a cycle of 15 seconds with a time-out of 6 seconds.\n4.5.1 Module implementation\nHere is the header file :\n   // ExampleModule.h file\n   #include \"dqm4hep/module/DQMModule.h\"   CHAPTER 4. ANALYSIS MODULES 17\n using namespace dqm4hep;\nclass ExampleModule : public DQMModule\n{\npublic:\nExampleModule();\nStatusCode initModule();\nStatusCode readSettings(const TiXmlHandle  xmlHandle);\nStatusCode processEvent(DQMEvent  pEvent);\nStatusCode startOfCycle();\nStatusCode endOfCycle();\nStatusCode startOfRun(DQMRun  pRun);\nStatusCode endOfRun(DQMRun  pRun);\nStatusCode resetModule();\nStatusCode endModule();\nprivate:\n// elements\nDQMMonitorElement\nDQMMonitorElement\nDQMMonitorElement\nDQMMonitorElement m_pNumberOfHitsHistogram; m_pEnergyHistogram; m_pHitTimeWithinSpill;\n*m_pXYHitPositionsHistogram;\n// additional parameters\nstd::string\nunsigned int\nfloat\nfloat\n};\nm_collectionName;\nm_minNHitToPublish;\nm_minHitPosition;\nm_maxHitPosition;\nHere the header of the implementation file :\n   // our header include\n   #include \"ExampleModule.h\"\n   #include \"dqm4hep/core/DQMMonitorElement.h\"\n   #include \"dqm4hep/core/DQMRun.h\"\n   #include \"dqm4hep/core/DQMXmlHelper.h\"\n   #include \"dqm4hep/module/DQMModuleApi.h\"\n   ExampleModule anExampleModule;\nAn instance of our module is declared in the implementation file. When the plugin will be loaded, the instance of our module will be automatically registered in the application.  CHAPTER 4. ANALYSIS MODULES 18\n    ExampleModule::ExampleModule() :\n     DQMModule(\"ExampleModule\")\n   {\n     setDetectorName(\"MySweetCalorimeter\");\n     setVersion(1, 0, 0);\n}\nThe constructor gives simply a type to our module. The name of the module will be decided at runtime. The (sub)detector name is set and the version. The latter may be used to identify the version of the module through the user interface.\n   StatusCode ExampleModule::readSettings(const TiXmlHandle  xmlHandle)\n   {\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"CollectionName\", m_collectionName));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MinNHitToPublish\", m_minNHitToPublish));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MinHitPosition\", m_minHitPosition));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::readValue(xmlHandle,\n                           \"MaxHitPosition\", m_maxHitPosition));\n     return STATUS_CODE_SUCCESS;\n   }\nThe settings are read from the xml handle. The xml helper helps to read the values. For instance, the collection name in our event is labelled by \"CollectionName\" and will be put in the string m_collectionName.\n   StatusCode ExampleModule::initModule()\n   {\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Hits\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Energy\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::mkdir(this,\n       \"/Time\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, \"/Hits\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookIntHistogram1D(this,\n     m_pNumberOfHitsHistogram, \"NumberOfHits\", \"Number of hits\", 1501, 0, 1500));  CHAPTER 4. ANALYSIS MODULES 19 RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this,\n       \"/Energy\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookFloatHistogram1D(this,\n     m_pEnergyHistogram, \"HitEnergy\", \"Hits energy\", 101, 0, 100));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMModuleApi::cd(this, \"/Time\"));\n     RETURN_RESULT_IF(STATUS_CODE_SUCCESS, !=,\n       DQMModuleApi::bookFloatHistogram1D(this,\n     m_pHitTimeWithinSpill, \"HitTimeWithinSpill\", \"Hit time within a spill\",\n       101, 0, 100));\n     m_pHitTimeWithinSpill- setResetPolicy(RESET_AT_END_OF_CYCLE);\n     DQMModuleApi::cd(this);\n     DQMModuleApi::ls(this, true);\n     return STATUS_CODE_SUCCESS;\n   }\nThe three first lines create internal directories to store the monitor elements. The next line changes the current directory to \"/Hits\". The two next lines book monitor elements. The first one is a histogram in 1D of int type, with name \"NumberOfHits\", title \"Number of hits\", with 1501 bins from 0 up to 1500. Note that the second argument is a null pointer on a monitor element. The latter is allocated in the function. The directory is again changed in order to book the \"HitEnergy\" histogram and \"HitTimeWithinSpill\" in two different directories. The last booked element has an additional line to set the reset policy. Since a cycle corresponds in our case to a spill, we want to reset this element at the end of each cycle. The two last lines change the current directory to the root one and print the structure in the console recursively (true as second argument).\n   StatusCode ExampleModule::processEvent(DQMEvent  pEvent)\n   {\n     EVENT::LCEvent  pLCEvent = pEvent- getEvent ();\n     if(NULL == pLCEvent)\n       return STATUS_CODE_FAILURE;\n     EVENT::LCCollection *pCaloHitCollection =\n       pLCEvent- getCollection(m_collectionName);  CHAPTER 4. ANALYSIS MODULES 20\n      for(unsigned int e=0 ; e getNumberOfElements() ; e++)\n     {\n       EVENT::CalorimeterHit  pCaloHit = pCaloHitCollection- getElementAt(e);\n       if(NULL == pCaloHit)\n         continue;\n       m_pEnergyHistogram- get ()- Fill(pCaloHit- getEnergy());\n       m_pHitTimeWithinSpill- get ()- Fill(pCaloHit- getTime());\n     }\n     m_pNumberOfHitsHistogram- get ()\n       - Fill(pCaloHitCollection- getNumberOfElements());\n     return STATUS_CODE_SUCCESS;\n   }\nHere is the most interesting part of the module. The processEvent(evt) function receives the data coming from the collector as soon as it is available. The DQMEvent class wraps an event that you can access via the template method getEvent (). In the example here, a EVENT::LCEvent is cast. It is usually a good idea to check that the event is correctly cast (NULL pointer comparison). Our calorimeter hit collection is then accessed. Inside the loop, the accessors on wrapped TObject work also by template method. Use the method get () to get the corresponding class. This class must corresponds to the type declared while booking the element. For instance, if a float histogram 1D is booked, the user must cast it into a TH1F by using the get () method. For the available methods you can use on the ROOT cast object, please refers to the ROOT documentation on the official website.\n   StatusCode ExampleModule::startOfCycle()\n   {\n     // no operation\n     return STATUS_CODE_SUCCESS;\n   }\n   StatusCode ExampleModule::endOfCycle()\n   {\n     double meanNHit = m_pNumberOfHitsHistogram- get ()- GetMean();\n     if(meanNHit   160   meanNHit   180)\n       m_pNumberOfHitsHistogram- setQuality(GOOD_QUALITY);\n     else\n       m_pNumberOfHitsHistogram- setQuality(BAD_QUALITY);\n     if(m_pNumberOfHitsHistogram- get ()- GetEntries()   500)\n       m_pNumberOfHitsHistogram- setToPublish(false);\n     else\n       m_pNumberOfHitsHistogram- setToPublish(true);\n     return STATUS_CODE_SUCCESS;\n   }\n For the start of cycle, we have nothing to process. But for the end of cycle, it is usually\nCHAPTER 4. ANALYSIS MODULES 21\nthe place where we evaluate quality of the processed data. In our case, we evaluate the quality of the number of hits histogram by looking at the mean within a range. We also check that enough data have been processed to publish our histogram.\n   StatusCode ExampleModule::startOfRun(DQMRun  pRun)\n   {\n     std::cout   \"Module : \"   getName()   \" -- startOfRun()\"   std::endl;\n     std::cout   \"Run no \"   pRun- getRunNumber()   std::endl;\n     std::string timeStr;\n     DQMCoreTool::timeToHMS(pRun- getStartTime(), timeStr);\n     std::cout   \"Starting time : \"   timeStr   std::endl;\n     return STATUS_CODE_SUCCESS;\n   }\n   StatusCode ExampleModule::endOfRun(DQMRun  pRun)\n   {\n     std::cout   \"Module : \"   getName()   \" -- startOfRun()\"   std::endl;\n     std::cout   \"Run no \"   pRun- getRunNumber()   std::endl;\n     std::string timeStr;\n     DQMCoreTool::timeToHMS(pRun- getStartTime(), timeStr);\n     std::cout   \"Ending time : \"   timeStr   std::endl;\n     return STATUS_CODE_SUCCESS;\n   }\nFor the start of run and end of run, we just do some printout. This is also the place where you may initiate a connection with a database to grab useful information for the next run.\n   StatusCode ExampleModule::resetModule()\n   {\n     return DQMModuleApi::resetMonitorElements(this);\n   }\n   StatusCode ExampleModule::endModule()\n   {\n     // no operation\n     return STATUS_CODE_SUCCESS;\n   }\nThe reset function simply reset all the monitor elements booked by this module by using the module API. No operation is processed in the endModule() function.\n4.5.2 Steering file\n4.5.3 Compiling the example\nSince the package is compiled using CMake, we propose here to compile our example with CMake. We propose the following directory structure :  root\n* source  CHAPTER 4. ANALYSIS MODULES 22  ExampleModule.h  ExampleModule.cc * build  xml  ExampleModule.xml\n* CMakeLists.txt\nIn the source directory our source files are put, the steering file for our application in the xml directory and the CMakeLists.txt file in the root directory. The steering file contents will be described in the next section. The CMakeLists.txt is needed to generate the MakeFile according to your plateform. Here is a complete CMakeLists.txt to compile our example :  # CMakeList.txt for ExampleModule\nCMAKE_MINIMUM_REQUIRED( VERSION 2.6 FATAL_ERROR )\n# project name\nPROJECT( ExampleModule )\n# append DQM4HEPConfig.cmake location to the default cmake module list\n\nLIST( APPEND CMAKE_MODULE_PATH path/to/dqm4hep )\n# load dqm4hep package\nFIND_PACKAGE( DQM4HEP REQUIRED )\n# include the dqm4hep directories\nINCLUDE_DIRECTORIES( ${DQM4HEP_INCLUDE_DIRS} )\n# link lbDQM4HEP.so (.dylib) to our library\nLINK_LIBRARIES( ${DQM4HEP_LIBRARIES} )\n# add specific flags to compilation from dqm4hep soft\nADD_DEFINITIONS ( ${DQM4HEP_DEFINITIONS} )\n# specify where our includes are\nINCLUDE_DIRECTORIES( source )\n# build our shared library libModuleExample.so (.dylib)\nADD_SHARED_LIBRARY( ExampleModule source/ExampleModule.cc )\n# install the shared library in the lib directory\nINSTALL(\n      TARGETS ExampleModule\n      LIBRARY DESTINATION lib\n)  4.5.4 Running the example\nChapter 5\nData streaming\n5.1 Streaming interface\n5.2 Data streamer plugin\n23\nChapter 6\nELog interface\n24", 
            "title": "Introduction"
        }, 
        {
            "location": "/references/", 
            "text": "Conferences\n\n\nComing soon ...\n\n\nMeetings\n\n\nComing soon ...\n\n\nPapers\n\n\nComming soon ...", 
            "title": "References"
        }, 
        {
            "location": "/references/#conferences", 
            "text": "Coming soon ...", 
            "title": "Conferences"
        }, 
        {
            "location": "/references/#meetings", 
            "text": "Coming soon ...", 
            "title": "Meetings"
        }, 
        {
            "location": "/references/#papers", 
            "text": "Comming soon ...", 
            "title": "Papers"
        }, 
        {
            "location": "/about/license/", 
            "text": "GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n\n\n\nCopyright (C) 2007 Free Software Foundation, Inc. \nhttp://fsf.org/\n\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n                        Preamble\n\n\n\nThe GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n\nThe licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n\nWhen we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n\nTo protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n\nFor example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n\nDevelopers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n\nFor the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n\nSome devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n\nFinally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n\nThe precise terms and conditions for copying, distribution and\nmodification follow.\n\n\n                   TERMS AND CONDITIONS\n\n\n\n\n\nDefinitions.\n\n\n\n\n\"This License\" refers to version 3 of the GNU General Public License.\n\n\n\"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n\n\"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n\nTo \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n\nA \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n\nTo \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n\nTo \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n\nAn interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n\n\n\nSource Code.\n\n\n\n\nThe \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n\nA \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n\nThe \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n\nThe \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n\nThe Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n\nThe Corresponding Source for a work in source code form is that\nsame work.\n\n\n\n\nBasic Permissions.\n\n\n\n\nAll rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n\nYou may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n\nConveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n\n\n\nProtecting Users' Legal Rights From Anti-Circumvention Law.\n\n\n\n\nNo covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n\nWhen you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n\n\n\nConveying Verbatim Copies.\n\n\n\n\nYou may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n\nYou may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n\n\n\nConveying Modified Source Versions.\n\n\n\n\nYou may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n\na) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n\n\n\nA compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n\n\n\nConveying Non-Source Forms.\n\n\n\n\nYou may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n\na) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n\n\n\nA separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n\nA \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n\n\"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n\nIf you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n\nThe requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n\nCorresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n\n\n\nAdditional Terms.\n\n\n\n\n\"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n\nWhen you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n\nNotwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n\na) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n\n\n\nAll other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n\nIf you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n\nAdditional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n\n\n\nTermination.\n\n\n\n\nYou may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n\nHowever, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n\nMoreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n\nTermination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n\n\n\nAcceptance Not Required for Having Copies.\n\n\n\n\nYou are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n\n\n\nAutomatic Licensing of Downstream Recipients.\n\n\n\n\nEach time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n\nAn \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n\nYou may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n\n\n\nPatents.\n\n\n\n\nA \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n\nA contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n\nEach contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n\nIn the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n\nIf you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n\nIf, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n\nA patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n\nNothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n\n\n\nNo Surrender of Others' Freedom.\n\n\n\n\nIf conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n\n\n\nUse with the GNU Affero General Public License.\n\n\n\n\nNotwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n\n\n\nRevised Versions of this License.\n\n\n\n\nThe Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n\nEach version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n\nIf the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n\nLater license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n\n\n\nDisclaimer of Warranty.\n\n\n\n\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n\n\n\nLimitation of Liability.\n\n\n\n\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n\n\n\nInterpretation of Sections 15 and 16.\n\n\n\n\nIf the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n\n                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n\n\n\nIf you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n\nTo do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n\none line to give the program's name and a brief idea of what it does.\n\nCopyright (C) \nyear\n  \nname of author\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see \nhttp://www.gnu.org/licenses/\n.\n\n\n\nAlso add information on how to contact you by electronic and paper mail.\n\n\nIf the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n\nprogram\n  Copyright (C) \nyear\n  \nname of author\n\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n\n\n\nThe hypothetical commands \nshow w' and\nshow c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n\nYou should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n\nhttp://www.gnu.org/licenses/\n.\n\n\nThe GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n\nhttp://www.gnu.org/philosophy/why-not-lgpl.html\n.", 
            "title": "Licence"
        }, 
        {
            "location": "/about/contact/", 
            "text": "Contact the authors\n\n\nOriginal authors :\n\n\n\n\nRemi Ete (IPNL, France)\n\n\nAntoine Pingault (Gent, Belgium)\n\n\nLaurent Mirabito (IPNL, France)\n\n\n\n\nContact : \ndqm4hep@gmail.com", 
            "title": "Contact"
        }, 
        {
            "location": "/about/contact/#contact-the-authors", 
            "text": "Original authors :   Remi Ete (IPNL, France)  Antoine Pingault (Gent, Belgium)  Laurent Mirabito (IPNL, France)   Contact :  dqm4hep@gmail.com", 
            "title": "Contact the authors"
        }, 
        {
            "location": "/about/contribute/", 
            "text": "Contributing\n\n\nTo contribute, use the pull request functionalities provided by GitHub.\n\n\nFor example, to contribute to the DQMCore package, fork the package with your GitHub account. Clone the forked repository :\n\n\ngit clone https://github.com/username/DQMCore.git\ncd DQMCore\ngit branch my-pull-request-branch\ngit checkout my-pull-request-branch\n\n\n\n\nthen work on the package as you need. When changes are done, do some commits :\n\n\ngit add 'modified files'\ngit commit -m \nyour commit message\n\ngit push origin my-pull-request-branch\n\n\n\n\nFinally, go to the official GitHub package page (https://github.com/DQM4HEP/DQMCore/pulls in this case) and create a new pull-request.", 
            "title": "Contribute"
        }, 
        {
            "location": "/about/contribute/#contributing", 
            "text": "To contribute, use the pull request functionalities provided by GitHub.  For example, to contribute to the DQMCore package, fork the package with your GitHub account. Clone the forked repository :  git clone https://github.com/username/DQMCore.git\ncd DQMCore\ngit branch my-pull-request-branch\ngit checkout my-pull-request-branch  then work on the package as you need. When changes are done, do some commits :  git add 'modified files'\ngit commit -m  your commit message \ngit push origin my-pull-request-branch  Finally, go to the official GitHub package page (https://github.com/DQM4HEP/DQMCore/pulls in this case) and create a new pull-request.", 
            "title": "Contributing"
        }
    ]
}